package com.infosys.opencart.base;


import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Platform;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;

import com.infosys.opencart.utils.ConfigReader;

public class BaseTest {
    public static WebDriver driver;
    public Logger logger;

    @BeforeClass(groups= {"Sanity", "Regression", "Master","Base"})
    @Parameters({"browser", "os"})
    public void setup(String browser, String os)  {
    	    logger = LogManager.getLogger(this.getClass());
    	    ConfigReader.loadConfig();
    	    String executionEnv = ConfigReader.get("execution_env");
    	    logger.info("Execution environment: " + executionEnv);
    	    // grid setup
    	    if (executionEnv.equalsIgnoreCase("remote")) {

                // OS handling
                String platformName = "";
                if (os.equalsIgnoreCase("windows")) {
                    platformName = Platform.WINDOWS.name();
                } else if (os.equalsIgnoreCase("linux")) {
                    platformName = Platform.LINUX.name();
                } else if (os.equalsIgnoreCase("mac")) {
                    platformName = Platform.MAC.name();
                } else {
                    logger.error("No matching OS");
                    return;
                }

    	        try {
                    // Browser setup
                switch (browser.toLowerCase()) {
    			    case "chrome":
    			        ChromeOptions chromeOptions = new ChromeOptions();
    			        chromeOptions.addArguments("--start-maximized");
    			        chromeOptions.addArguments("--disable-notifications");
    			        chromeOptions.setPlatformName(platformName);
    			        driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), chromeOptions);
    			        break;
    			
    			    case "edge":
    			        EdgeOptions edgeOptions = new EdgeOptions();
    			        edgeOptions.addArguments("--start-maximized");
    			        edgeOptions.addArguments("--disable-notifications");
    			        edgeOptions.setPlatformName(platformName);
    			        driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), edgeOptions);
    			        break;
    			
    			    case "firefox":
    			        FirefoxOptions firefoxOptions = new FirefoxOptions();
    			        firefoxOptions.addArguments("--start-maximized");
    			        firefoxOptions.addArguments("--disable-notifications");
    			        firefoxOptions.setPlatformName(platformName);
    			        driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), firefoxOptions);
    			        break;
    			
    			    default:
    			        logger.error("No matching browser");
    			        return;
    			   }

             }
              catch (MalformedURLException e) {
                    e.printStackTrace();
                }

                logger.info("Remote driver started: " + browser + " on " + os);

            } else {
                // Local execution
                driver = DriverFactory.initDriver(browser);
                logger.info("Local driver started: " + browser);
            }
    	    // Common setup
        driver.manage().deleteAllCookies();
        driver.manage().window().maximize();
        driver.manage().window().setSize(new Dimension(1920, 1080));
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
    	    // Navigate to URL
    	    String url = ConfigReader.get("baseURL");
    	    driver.get(url);
    	    logger.info("Navigated to: " + url);
    	}


    @AfterClass(groups= {"Sanity", "Regression", "Master","Base"})
    public void tearDown() {
        if (driver != null) {
        	    logger.info("Closing the browser.");
            driver.quit();
        }
    }
    public String captureScreen(String tname) throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());

        TakesScreenshot takesScreenshot = (TakesScreenshot) driver;
        java.io.File sourceFile = takesScreenshot.getScreenshotAs(OutputType.FILE);

        String targetFilePath = System.getProperty("user.dir") + "\\screenshots\\" + tname + "_" + timeStamp + ".png";
        File targetFile = new File(targetFilePath);

        //sourceFile.renameTo(targetFile);
        FileUtils.copyFile(sourceFile, targetFile);

        return targetFilePath;
    }
}
